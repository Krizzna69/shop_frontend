{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaswa\\\\OneDrive\\\\Projects\\\\vijayalakshmi\\\\grocery-shop-frontend\\\\src\\\\components\\\\ManageOrders.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport '../styles/ManageOrders.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageOrders = () => {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [currentDateTime] = useState('2025-03-27 08:39:07');\n  const [currentUser] = useState('Krizzna69');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  useEffect(() => {\n    // Define function inside useEffect to avoid dependency issues\n    const fetchAllOrders = async () => {\n      try {\n        setLoading(true);\n        console.log(\"Admin: Fetching all orders\");\n\n        // Collect all orders from all localStorage sources\n        let allOrders = [];\n\n        // 1. Check allOrders key first\n        try {\n          const allOrdersStr = localStorage.getItem('allOrders');\n          if (allOrdersStr) {\n            const parsedOrders = JSON.parse(allOrdersStr);\n            if (Array.isArray(parsedOrders)) {\n              allOrders = parsedOrders;\n              console.log(`Admin: Found ${allOrders.length} orders in allOrders`);\n            }\n          }\n        } catch (err) {\n          console.error(\"Admin: Error reading allOrders:\", err);\n        }\n\n        // 2. Look for user-specific order collections\n        const userSpecificOrders = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (key && key.startsWith('orders_')) {\n            try {\n              const userOrdersStr = localStorage.getItem(key);\n              if (userOrdersStr) {\n                const userOrders = JSON.parse(userOrdersStr);\n                if (Array.isArray(userOrders)) {\n                  userSpecificOrders.push(...userOrders);\n                  console.log(`Admin: Found ${userOrders.length} orders in ${key}`);\n                }\n              }\n            } catch (err) {\n              console.error(`Admin: Error reading ${key}:`, err);\n            }\n          }\n        }\n\n        // 3. Check lastOrder as final fallback\n        if (allOrders.length === 0 && userSpecificOrders.length === 0) {\n          try {\n            const lastOrderStr = localStorage.getItem('lastOrder');\n            if (lastOrderStr) {\n              const lastOrder = JSON.parse(lastOrderStr);\n              if (lastOrder && lastOrder._id) {\n                allOrders = [lastOrder];\n                console.log(\"Admin: Found order in lastOrder\");\n              }\n            }\n          } catch (err) {\n            console.error(\"Admin: Error reading lastOrder:\", err);\n          }\n        } else if (userSpecificOrders.length > 0) {\n          // Combine all orders, avoiding duplicates by order ID\n          const orderMap = new Map();\n\n          // Add allOrders first\n          allOrders.forEach(order => {\n            if (order && order._id) {\n              orderMap.set(order._id, order);\n            }\n          });\n\n          // Then add user-specific orders (may override allOrders)\n          userSpecificOrders.forEach(order => {\n            if (order && order._id) {\n              orderMap.set(order._id, order);\n            }\n          });\n\n          // Convert back to array\n          allOrders = Array.from(orderMap.values());\n        }\n\n        // Sort by date (most recent first)\n        allOrders.sort((a, b) => {\n          return new Date(b.createdAt || 0) - new Date(a.createdAt || 0);\n        });\n        console.log(`Admin: Setting ${allOrders.length} orders in state`);\n        setOrders(allOrders);\n      } catch (err) {\n        setError(\"Failed to fetch orders: \" + (err.message || \"Unknown error\"));\n        console.error(\"Admin error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllOrders();\n  }, [token]);\n\n  // Rest of the component remains the same\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"manage-orders-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"orders-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Manage Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: currentDateTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Administrator: \", currentUser]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageOrders, \"PxcAt5muCrqZrhH2MLgxcTosL84=\");\n_c = ManageOrders;\nexport default ManageOrders;\nvar _c;\n$RefreshReg$(_c, \"ManageOrders\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","ManageOrders","_s","token","orders","setOrders","loading","setLoading","error","setError","successMessage","setSuccessMessage","selectedOrder","setSelectedOrder","currentDateTime","currentUser","searchTerm","setSearchTerm","statusFilter","setStatusFilter","fetchAllOrders","console","log","allOrders","allOrdersStr","localStorage","getItem","parsedOrders","JSON","parse","Array","isArray","length","err","userSpecificOrders","i","key","startsWith","userOrdersStr","userOrders","push","lastOrderStr","lastOrder","_id","orderMap","Map","forEach","order","set","from","values","sort","a","b","Date","createdAt","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jaswa/OneDrive/Projects/vijayalakshmi/grocery-shop-frontend/src/components/ManageOrders.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport '../styles/ManageOrders.css';\r\n\r\nconst ManageOrders = () => {\r\n  const { token } = useContext(AuthContext);\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [currentDateTime] = useState('2025-03-27 08:39:07');\r\n  const [currentUser] = useState('Krizzna69');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Define function inside useEffect to avoid dependency issues\r\n    const fetchAllOrders = async () => {\r\n      try {\r\n        setLoading(true);\r\n        console.log(\"Admin: Fetching all orders\");\r\n        \r\n        // Collect all orders from all localStorage sources\r\n        let allOrders = [];\r\n        \r\n        // 1. Check allOrders key first\r\n        try {\r\n          const allOrdersStr = localStorage.getItem('allOrders');\r\n          if (allOrdersStr) {\r\n            const parsedOrders = JSON.parse(allOrdersStr);\r\n            if (Array.isArray(parsedOrders)) {\r\n              allOrders = parsedOrders;\r\n              console.log(`Admin: Found ${allOrders.length} orders in allOrders`);\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Admin: Error reading allOrders:\", err);\r\n        }\r\n        \r\n        // 2. Look for user-specific order collections\r\n        const userSpecificOrders = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n          const key = localStorage.key(i);\r\n          if (key && key.startsWith('orders_')) {\r\n            try {\r\n              const userOrdersStr = localStorage.getItem(key);\r\n              if (userOrdersStr) {\r\n                const userOrders = JSON.parse(userOrdersStr);\r\n                if (Array.isArray(userOrders)) {\r\n                  userSpecificOrders.push(...userOrders);\r\n                  console.log(`Admin: Found ${userOrders.length} orders in ${key}`);\r\n                }\r\n              }\r\n            } catch (err) {\r\n              console.error(`Admin: Error reading ${key}:`, err);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 3. Check lastOrder as final fallback\r\n        if (allOrders.length === 0 && userSpecificOrders.length === 0) {\r\n          try {\r\n            const lastOrderStr = localStorage.getItem('lastOrder');\r\n            if (lastOrderStr) {\r\n              const lastOrder = JSON.parse(lastOrderStr);\r\n              if (lastOrder && lastOrder._id) {\r\n                allOrders = [lastOrder];\r\n                console.log(\"Admin: Found order in lastOrder\");\r\n              }\r\n            }\r\n          } catch (err) {\r\n            console.error(\"Admin: Error reading lastOrder:\", err);\r\n          }\r\n        } else if (userSpecificOrders.length > 0) {\r\n          // Combine all orders, avoiding duplicates by order ID\r\n          const orderMap = new Map();\r\n          \r\n          // Add allOrders first\r\n          allOrders.forEach(order => {\r\n            if (order && order._id) {\r\n              orderMap.set(order._id, order);\r\n            }\r\n          });\r\n          \r\n          // Then add user-specific orders (may override allOrders)\r\n          userSpecificOrders.forEach(order => {\r\n            if (order && order._id) {\r\n              orderMap.set(order._id, order);\r\n            }\r\n          });\r\n          \r\n          // Convert back to array\r\n          allOrders = Array.from(orderMap.values());\r\n        }\r\n        \r\n        // Sort by date (most recent first)\r\n        allOrders.sort((a, b) => {\r\n          return new Date(b.createdAt || 0) - new Date(a.createdAt || 0);\r\n        });\r\n        \r\n        console.log(`Admin: Setting ${allOrders.length} orders in state`);\r\n        setOrders(allOrders);\r\n      } catch (err) {\r\n        setError(\"Failed to fetch orders: \" + (err.message || \"Unknown error\"));\r\n        console.error(\"Admin error:\", err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchAllOrders();\r\n  }, [token]);\r\n\r\n  // Rest of the component remains the same\r\n  // ...\r\n\r\n  return (\r\n    <div className=\"manage-orders-container\">\r\n      <div className=\"orders-header\">\r\n        <h2>Manage Orders</h2>\r\n        <div className=\"admin-info\">\r\n          <span>{currentDateTime}</span>\r\n          <span>Administrator: {currentUser}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Rest of the component remains the same */}\r\n      {/* ... */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageOrders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}