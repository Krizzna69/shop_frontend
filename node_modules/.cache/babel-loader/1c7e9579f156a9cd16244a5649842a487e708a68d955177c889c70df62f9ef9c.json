{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport { FaBox, FaArrowLeft } from 'react-icons/fa';\nimport '../styles/Orders.css';\nconst Orders = () => {\n  _s();\n  var _location$state;\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [currentDateTime] = useState('2025-03-27 08:33:54');\n  const [currentUserName] = useState('Krizzna69');\n  const location = useLocation();\n\n  // Check if a new order was just placed\n  const newOrderId = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.newOrderId;\n  const fetchOrders = async () => {\n    setLoading(true);\n    try {\n      // Get user ID from context or use username as fallback\n      const userId = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || currentUserName || 'anonymous';\n      console.log('Fetching orders for user:', userId);\n\n      // Construct user-specific storage key\n      const userOrdersKey = `orders_${userId}`;\n\n      // Get orders for this specific user\n      let userOrders = [];\n      try {\n        const userOrdersStr = localStorage.getItem(userOrdersKey);\n        if (userOrdersStr) {\n          const parsedOrders = JSON.parse(userOrdersStr);\n          console.log('Raw orders data from localStorage:', userOrdersStr.substring(0, 100) + '...');\n          if (Array.isArray(parsedOrders)) {\n            userOrders = parsedOrders;\n            console.log('Found orders for user:', userId, userOrders.length);\n            // Debug first order if exists\n            if (userOrders.length > 0) {\n              console.log('First order:', JSON.stringify(userOrders[0]).substring(0, 100) + '...');\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"Error parsing user orders from localStorage:\", err);\n      }\n\n      // If still no orders, check old format for this user (for backward compatibility)\n      if (userOrders.length === 0) {\n        console.log('Checking allOrders for user orders');\n        try {\n          const allOrdersStr = localStorage.getItem('allOrders');\n          if (allOrdersStr) {\n            const allOrders = JSON.parse(allOrdersStr);\n            if (Array.isArray(allOrders)) {\n              // Filter to only this user's orders\n              userOrders = allOrders.filter(order => order.userId === userId || order.userName === currentUserName);\n              console.log('Found orders in allOrders for user:', userOrders.length);\n            }\n          }\n        } catch (err) {\n          console.error(\"Error parsing all orders:\", err);\n        }\n      }\n\n      // Last fallback - check lastOrder\n      if (userOrders.length === 0) {\n        console.log('Checking lastOrder as final fallback');\n        try {\n          const lastOrderStr = localStorage.getItem('lastOrder');\n          if (lastOrderStr) {\n            const lastOrder = JSON.parse(lastOrderStr);\n            if (lastOrder && lastOrder._id) {\n              // Only include if it belongs to this user or has no user ID\n              if (!lastOrder.userId || lastOrder.userId === userId || lastOrder.userName === currentUserName) {\n                userOrders = [lastOrder];\n                console.log('Found order in lastOrder:', lastOrder._id);\n              }\n            }\n          }\n        } catch (err) {\n          console.error(\"Error parsing last order:\", err);\n        }\n      }\n      console.log(`Setting ${userOrders.length} orders in state`);\n      // Set the orders in state\n      setOrders(userOrders);\n    } catch (err) {\n      console.error(\"Error fetching orders:\", err);\n      setError('Failed to load orders. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Debug current state\n    console.log(\"Orders component mounted, AuthContext:\", currentUser);\n    fetchOrders();\n  }, [currentUser, newOrderId, fetchOrders]); // Added fetchOrders to dependencies\n\n  // Rest of the component remains the same\n  // ...\n};\n_s(Orders, \"Noe92icbj1A1626UnAJaQZsxMp4=\", false, function () {\n  return [useLocation];\n});\n_c = Orders;\nexport default Orders;\nvar _c;\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Link","useLocation","AuthContext","FaBox","FaArrowLeft","Orders","_s","_location$state","currentUser","orders","setOrders","loading","setLoading","error","setError","currentDateTime","currentUserName","location","newOrderId","state","fetchOrders","userId","id","console","log","userOrdersKey","userOrders","userOrdersStr","localStorage","getItem","parsedOrders","JSON","parse","substring","Array","isArray","length","stringify","err","allOrdersStr","allOrders","filter","order","userName","lastOrderStr","lastOrder","_id","_c","$RefreshReg$"],"sources":["C:/Users/jaswa/OneDrive/Projects/vijayalakshmi/grocery-shop-frontend/src/components/Orders.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { FaBox, FaArrowLeft } from 'react-icons/fa';\r\nimport '../styles/Orders.css';\r\n\r\nconst Orders = () => {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [currentDateTime] = useState('2025-03-27 08:33:54');\r\n  const [currentUserName] = useState('Krizzna69');\r\n  const location = useLocation();\r\n  \r\n  // Check if a new order was just placed\r\n  const newOrderId = location.state?.newOrderId;\r\n  \r\n  const fetchOrders = async () => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Get user ID from context or use username as fallback\r\n      const userId = currentUser?.id || currentUserName || 'anonymous';\r\n      console.log('Fetching orders for user:', userId);\r\n      \r\n      // Construct user-specific storage key\r\n      const userOrdersKey = `orders_${userId}`;\r\n      \r\n      // Get orders for this specific user\r\n      let userOrders = [];\r\n      \r\n      try {\r\n        const userOrdersStr = localStorage.getItem(userOrdersKey);\r\n        if (userOrdersStr) {\r\n          const parsedOrders = JSON.parse(userOrdersStr);\r\n          console.log('Raw orders data from localStorage:', userOrdersStr.substring(0, 100) + '...');\r\n          \r\n          if (Array.isArray(parsedOrders)) {\r\n            userOrders = parsedOrders;\r\n            console.log('Found orders for user:', userId, userOrders.length);\r\n            // Debug first order if exists\r\n            if (userOrders.length > 0) {\r\n              console.log('First order:', JSON.stringify(userOrders[0]).substring(0, 100) + '...');\r\n            }\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error parsing user orders from localStorage:\", err);\r\n      }\r\n      \r\n      // If still no orders, check old format for this user (for backward compatibility)\r\n      if (userOrders.length === 0) {\r\n        console.log('Checking allOrders for user orders');\r\n        try {\r\n          const allOrdersStr = localStorage.getItem('allOrders');\r\n          if (allOrdersStr) {\r\n            const allOrders = JSON.parse(allOrdersStr);\r\n            if (Array.isArray(allOrders)) {\r\n              // Filter to only this user's orders\r\n              userOrders = allOrders.filter(order => \r\n                order.userId === userId || \r\n                order.userName === currentUserName\r\n              );\r\n              console.log('Found orders in allOrders for user:', userOrders.length);\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error parsing all orders:\", err);\r\n        }\r\n      }\r\n      \r\n      // Last fallback - check lastOrder\r\n      if (userOrders.length === 0) {\r\n        console.log('Checking lastOrder as final fallback');\r\n        try {\r\n          const lastOrderStr = localStorage.getItem('lastOrder');\r\n          if (lastOrderStr) {\r\n            const lastOrder = JSON.parse(lastOrderStr);\r\n            if (lastOrder && lastOrder._id) {\r\n              // Only include if it belongs to this user or has no user ID\r\n              if (!lastOrder.userId || lastOrder.userId === userId || \r\n                  lastOrder.userName === currentUserName) {\r\n                userOrders = [lastOrder];\r\n                console.log('Found order in lastOrder:', lastOrder._id);\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error parsing last order:\", err);\r\n        }\r\n      }\r\n      \r\n      console.log(`Setting ${userOrders.length} orders in state`);\r\n      // Set the orders in state\r\n      setOrders(userOrders);\r\n    } catch (err) {\r\n      console.error(\"Error fetching orders:\", err);\r\n      setError('Failed to load orders. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // Debug current state\r\n    console.log(\"Orders component mounted, AuthContext:\", currentUser);\r\n    fetchOrders();\r\n  }, [currentUser, newOrderId, fetchOrders]); // Added fetchOrders to dependencies\r\n  \r\n  // Rest of the component remains the same\r\n  // ...\r\n};\r\n\r\nexport default Orders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}