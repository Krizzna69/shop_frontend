{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaswa\\\\OneDrive\\\\Projects\\\\vijayalakshmi\\\\grocery-shop-frontend\\\\src\\\\context\\\\CartContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [cartTotal, setCartTotal] = useState(0);\n\n  // Load cart from localStorage when component mounts\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        const parsedCart = JSON.parse(savedCart);\n        setCartItems(parsedCart);\n      } catch (error) {\n        console.error('Error parsing cart from localStorage:', error);\n        setCartItems([]);\n      }\n    }\n  }, []);\n\n  // Update localStorage and calculate total whenever cart changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n    calculateTotal();\n  }, [cartItems]);\n\n  // Calculate cart total\n  const calculateTotal = () => {\n    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    setCartTotal(total);\n  };\n\n  // Add item to cart\n  const addToCart = product => {\n    setCartItems(prevItems => {\n      // Check if product is already in cart\n      const existingItem = prevItems.find(item => item._id === product._id);\n      if (existingItem) {\n        // If product exists, increase quantity\n        return prevItems.map(item => item._id === product._id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        // If product doesn't exist, add with quantity 1\n        return [...prevItems, {\n          ...product,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item._id !== productId));\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity < 1) return;\n    setCartItems(prevItems => prevItems.map(item => item._id === productId ? {\n      ...item,\n      quantity: quantity\n    } : item));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      cartTotal,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      getCartItemCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"o1jHrqSK5OpDgcqsG9k4NqVB1x0=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","cartTotal","setCartTotal","savedCart","localStorage","getItem","parsedCart","JSON","parse","error","console","setItem","stringify","calculateTotal","total","reduce","sum","item","price","quantity","addToCart","product","prevItems","existingItem","find","_id","map","removeFromCart","productId","filter","updateQuantity","clearCart","getCartItemCount","count","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jaswa/OneDrive/Projects/vijayalakshmi/grocery-shop-frontend/src/context/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [cartTotal, setCartTotal] = useState(0);\r\n  \r\n  // Load cart from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      try {\r\n        const parsedCart = JSON.parse(savedCart);\r\n        setCartItems(parsedCart);\r\n      } catch (error) {\r\n        console.error('Error parsing cart from localStorage:', error);\r\n        setCartItems([]);\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  // Update localStorage and calculate total whenever cart changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n    calculateTotal();\r\n  }, [cartItems]);\r\n  \r\n  // Calculate cart total\r\n  const calculateTotal = () => {\r\n    const total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n    setCartTotal(total);\r\n  };\r\n  \r\n  // Add item to cart\r\n  const addToCart = (product) => {\r\n    setCartItems(prevItems => {\r\n      // Check if product is already in cart\r\n      const existingItem = prevItems.find(item => item._id === product._id);\r\n      \r\n      if (existingItem) {\r\n        // If product exists, increase quantity\r\n        return prevItems.map(item => \r\n          item._id === product._id \r\n            ? { ...item, quantity: item.quantity + 1 }\r\n            : item\r\n        );\r\n      } else {\r\n        // If product doesn't exist, add with quantity 1\r\n        return [...prevItems, { ...product, quantity: 1 }];\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Remove item from cart\r\n  const removeFromCart = (productId) => {\r\n    setCartItems(prevItems => prevItems.filter(item => item._id !== productId));\r\n  };\r\n  \r\n  // Update item quantity\r\n  const updateQuantity = (productId, quantity) => {\r\n    if (quantity < 1) return;\r\n    \r\n    setCartItems(prevItems => \r\n      prevItems.map(item => \r\n        item._id === productId \r\n          ? { ...item, quantity: quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n  \r\n  // Clear cart\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n  };\r\n  \r\n  // Get cart item count\r\n  const getCartItemCount = () => {\r\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\r\n  };\r\n  \r\n  return (\r\n    <CartContext.Provider value={{\r\n      cartItems,\r\n      cartTotal,\r\n      addToCart,\r\n      removeFromCart,\r\n      updateQuantity,\r\n      clearCart,\r\n      getCartItemCount\r\n    }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}